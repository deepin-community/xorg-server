From 49d36f80e6a109011e056aa3cfc155f8d2a2aa2d Mon Sep 17 00:00:00 2001
From: Brendan King <Brendan.King@imgtec.com>
Date: Tue, 15 Nov 2016 13:46:49 +0000
Subject: [PATCH] Allow selection of the primary bus/device driver

Allow the primary bus/device driver to be selected on the command
line, or in the server configuration files.

The primary bus/device driver can be selected using command line
option "-primaryBusDrv <driver>", or in the ServerFlags section
of the configuration files using:

	PrimaryBusDriver driver
---
 hw/xfree86/common/xf86Config.c      | 13 +++++++++++++
 hw/xfree86/common/xf86Globals.c     |  3 +++
 hw/xfree86/common/xf86Init.c        | 12 ++++++++++++
 hw/xfree86/common/xf86Privstr.h     |  4 ++++
 hw/xfree86/common/xf86platformBus.c | 14 ++++++++++++++
 5 files changed, 46 insertions(+)

diff --git a/hw/xfree86/common/xf86Config.c b/hw/xfree86/common/xf86Config.c
index 5d814c148..e230b73d1 100644
--- a/hw/xfree86/common/xf86Config.c
+++ b/hw/xfree86/common/xf86Config.c
@@ -646,6 +646,7 @@
     FLAG_MAX_CLIENTS,
     FLAG_IGLX,
     FLAG_DEBUG,
+    FLAG_PRIMARY_BUS_DRIVER,
 } FlagValues;
 
 /**
@@ -705,6 +706,8 @@
      {0}, FALSE},
     {FLAG_DEBUG, "Debug", OPTV_STRING,
      {0}, FALSE},
+    {FLAG_PRIMARY_BUS_DRIVER, "PrimaryBusDriver", OPTV_STRING,
+     {0}, FALSE},
     {-1, NULL, OPTV_NONE,
      {0}, FALSE},
 };
@@ -963,6 +966,16 @@
     }
     xf86Msg(from, "Max clients allowed: %i, resource mask: 0x%x\n",
 	    LimitClients, RESOURCE_ID_MASK);
+
+#ifdef XSERVER_PLATFORM_BUS
+    if (xf86Info.primaryBusDrvFrom != X_CMDLINE) {
+	xf86Info.primaryBusDrv = xf86GetOptValString(FlagOptions,
+						     FLAG_PRIMARY_BUS_DRIVER);
+
+	xf86Info.primaryBusDrvFrom = xf86Info.primaryBusDrv ? X_CONFIG :
+							      X_DEFAULT;
+    }
+#endif
 }
 
 Bool
diff --git a/hw/xfree86/common/xf86Globals.c b/hw/xfree86/common/xf86Globals.c
index 65a3192df..71c7af7dc 100644
--- a/hw/xfree86/common/xf86Globals.c
+++ b/hw/xfree86/common/xf86Globals.c
@@ -134,6 +134,9 @@
     .autoAddGPU = FALSE,
 #endif
     .autoBindGPU = TRUE,
+#ifdef XSERVER_PLATFORM_BUS
+    .primaryBusDrv = NULL,
+#endif
 };
 
 const char *xf86ConfigFile = NULL;
diff --git a/hw/xfree86/common/xf86Init.c b/hw/xfree86/common/xf86Init.c
index 5695e71ac..2ffc4751f 100644
--- a/hw/xfree86/common/xf86Init.c
+++ b/hw/xfree86/common/xf86Init.c
@@ -1182,6 +1182,15 @@
         return 1;
     }
 
+#ifdef XSERVER_PLATFORM_BUS
+    if (!strcmp(argv[i], "-primaryBusDrv")) {
+	CHECK_FOR_REQUIRED_ARGUMENTS(1);
+	xf86Info.primaryBusDrv = argv[i];
+	xf86Info.primaryBusDrvFrom = X_CMDLINE;
+	return 2;
+    }
+#endif
+
     /* OS-specific processing */
     return xf86ProcessArgument(argc, argv, i);
 }
@@ -1251,6 +1260,9 @@
     ErrorF
         ("-novtswitch            don't automatically switch VT at reset & exit\n");
     ErrorF("-sharevts              share VTs with another X server\n");
+#ifdef XSERVER_PLATFORM_BUS
+    ErrorF("-primaryBusDrv         specify the primary bus/device driver\n");
+#endif
     /* OS-specific usage */
     xf86UseMsg();
     ErrorF("\n");
diff --git a/hw/xfree86/common/xf86Privstr.h b/hw/xfree86/common/xf86Privstr.h
index 31861148f..2d7b5b5c4 100644
--- a/hw/xfree86/common/xf86Privstr.h
+++ b/hw/xfree86/common/xf86Privstr.h
@@ -97,6 +97,10 @@
     Bool autoAddGPU;
     const char *debug;
     Bool autoBindGPU;
+#ifdef XSERVER_PLATFORM_BUS
+    const char *primaryBusDrv;
+    MessageType primaryBusDrvFrom;
+#endif
 } xf86InfoRec, *xf86InfoPtr;
 
 /* ISC's cc can't handle ~ of UL constants, so explicitly type cast them. */
diff --git a/hw/xfree86/common/xf86platformBus.c b/hw/xfree86/common/xf86platformBus.c
index 45028f7a6..5834ce04b 100644
--- a/hw/xfree86/common/xf86platformBus.c
+++ b/hw/xfree86/common/xf86platformBus.c
@@ -756,6 +756,20 @@
 
 void xf86platformPrimary(void)
 {
+    if (xf86Info.primaryBusDrv) {
+	int i;
+
+	for (i = 0; i < xf86_num_platform_devices; i++) {
+	    if (!strcmp(xf86_platform_devices[i].attribs->driver, xf86Info.primaryBusDrv)) {
+		primaryBus.id.plat = &xf86_platform_devices[i];
+		primaryBus.type = BUS_PLATFORM;
+		xf86Msg(X_INFO, "Primary bus/device is %s (driver \"%s\")\n", primaryBus.id.plat->attribs->syspath, primaryBus.id.plat->attribs->driver);
+			break;
+	    }
+	}
+	if (i == xf86_num_platform_devices)
+	    xf86Msg(X_WARNING, "Couldn't find a primary bus/device with driver \"%s\"\n", xf86Info.primaryBusDrv);
+    }
     /* use the first platform device as a fallback */
     if (primaryBus.type == BUS_NONE) {
         xf86Msg(X_INFO, "no primary bus or device found\n");
-- 
2.20.1
